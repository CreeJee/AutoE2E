#lib
# scalar Date

enum Property {
    width
    height
}
enum TagEnum {
    SUCCESS
    WARN
    TEST_ERROR
    UNKNOWN_ERR
}
enum LogType {
    INFO
    WARN
    DANGER
}
enum TaskJob {
    focus
    focusOut
    click
    doubleClick
    mouseEnter
    mouseLeave
    resize
    zoom
    keyDown
    keyUp
    keyPress
}
#atomic
interface Node {
    name: ID!
}
interface Log {
    type: LogType!
    message: String!
}
#todo extends all interface
#service type
type Tag implements Log {
    type: LogType!
    message: String!
}
type DocumentNode implements Node {
    name: ID!
    children: [DocumentNode!]!
}
type Task {
    name: TaskJob!
    param: [String!]!
    current: DocumentNode!
}
type TaskGroup implements Node {
    name: ID!
    tasks: [Task!]!
}
type Project implements Node {
    name: ID!
    window: DocumentNode
    tags: [Tag!]!
    taskGroup: [TaskGroup!]!
}

input TaskInfo {
    name: ID!
    nodeId: ID!
    param: [String!]!
}

#RootType
type Query {
    projects: [Project!]!
    project(id: ID): Project
}
type Mutation {
    createProject(name: ID): Project
    deleteProject(name: ID): Boolean

    insertGroup(project: ID, group: ID): TaskGroup
    removeGroup(project: ID, group: ID): Boolean

    insertTask(project: ID, group: ID, task: TaskInfo): Task
    removeTask(project: ID, group: ID, nth: Int): Boolean

    runTask(project: ID, group: ID): DocumentNode
}
